<?php


error_reporting(E_ALL & ~E_NOTICE);
ini_set('display_errors', 'stdout');
session_start();

require_once('./clsQWiki.php');
require_once('./clsEncryption.php');
require_once('./clsProfile.php');

$QWENV               = parse_ini_file('.env');
$config              = $QWENV;

$configEnc['KEY1']   = $QWENV['KEY1'];
$configEnc['KEY2']   = $QWENV['KEY2'];

// Qwiki instances on different servers
$xSN = strtolower($_SERVER['SERVER_NAME']);
switch ($xSN) {

    case "susiepc":
    case "192.168.0.201":
        $config['qwURL']     = "https://susiepc/QWiki/QW";                      // URL  to root of QW application
        $config['QWNAME']    = "EdbergNet Qwiki";
        $config['rootPath']  = "P:\Qwiki\EdbergQwiki";                          // PATH to root of QW data
        $config['rootURL']   = "https://susiepc/Qwiki/EdbergQwiki";             // URL  to root of QW data
        break;
    case "susiepc-2":
    case "192.168.0.201-2":
        $config['qwURL']     = "https://susiepc/QWiki/QW";                      // URL  to root of QW application
        $config['QWNAME']    = "Qwiki Help & Support";
        $config['rootPath']  = "P:\Qwiki\QW\QwikiHelpSupport";                  // PATH to root of QW data
        $config['rootURL']   = "https://susiepc/Qwiki/QW/QwikiHelpSupport";     // URL  to root of QW data
        break;
    case "elelinux":
    case "192.168.0.141":
        $config['qwURL']     = "http://elelinux/QW";
        $config['QWNAME']    = "EdbergNet Qwiki";
        $config['rootPath']  = "/var/www/html/QW/EdbergQwiki";
        $config['rootURL']   = "http://elelinux/QW/EdbergQwiki";
        break;
    default:
        echo "ERROR:  unknown Qwiki instance, Get Help";
        exit;
}

$config['qwServerURL']      = $config['qwURL'] . "/QW.php";                    // URL to QW program
$config['SearchEnabled']    = true;                                            // Is Full Text Search enabled using MySQL db?
$config['UploadEnabled']    = true;
$config['folderSep']        = DIRECTORY_SEPARATOR;                             // Native file system seperator:  win: \ and linux: /  (this can be automated)
$config['folderPath']       = $config['rootPath'];                             // Default, but mostly overwritten blelow
$config['folder']           = null;                                            // Default, but mostly overwritten below
$config['contentFileName']  = "-Content.php";
$config['FileIOAction']     = null;
$config['ArchiveFolderName'] = "Save";                                         // created in same folder as selected file resides

// --------------------------------------------
// encryption keys are also dynamially generated by clsEncryption() and could be used by QW if stored in a session
// TODO:  prototype dynamic encryption key usage.  
//        users would not be able to save URLs that contain encrypted options
//        user authentication key exchange would break so seperate key exchange would be needed
// --------------------------------------------
$config['ENCRYPTION']       = $QWENV['ENCRYPTION'];
$objENC                     = new clsEncryption($configEnc);

// --------------------------------------------
// clsProfile manages Qwiki user authentication
// --------------------------------------------
$config['Auth']['Enabled']   = true;
$config['Auth']['serverURL'] = "https://susiepc/QWiki/Auth/Auth.php";
$config['Auth']['loginURL']  = $config['Auth']['serverURL'] . "?Action=LoginFormDisplay&AuthReturnURL=" . urlencode($config['qwServerURL'] . "?" . $objENC->encryptData("Profile=1")); 
// log out of QW, not the authentication server.  QW may use Ajax to send a log-out message to remote auth server?
$config['Auth']['logoutURL'] = $config['qwServerURL'] . "?"  . $objENC->encryptData("Profile=1&profileAction=logout");
			
// --------------------------------------------
// --------------------------------------------
function dump($var) {
    echo "<div class=dbg><pre>";
    print_r($var);
    echo "</pre></div>";
}

// --------------------------------------------
// Most, but not all, information is specified in a preferrably-encrypted QUERY_STRING
// QwikiWi $objQW->INIT() derives other options on instanciation or when called
// Some options are contained in POST such as: clsUpload (files[]) and clsFileIO (button press values)
// NOTE:  all folders and files MUST BE relative to physical (realpath) of the Qwiki ROOT path.  
//        Various checks are performed to ensure this is maintained by INIT()
// --------------------------------------------

if (!(strcmp($_SERVER['QUERY_STRING'],"")==0)) {
    $xOptions                      = $_SERVER['QUERY_STRING'];
    if ($config['ENCRYPTION']) {
        $config['QS_Original']     = $xOptions;
        $xOptions = $objENC->decryptData($xOptions);
        $config['QS_Decrypted']    = $xOptions;
    }
    $xOptions                      = $objENC->strToNameValueArray($xOptions,"&","=");
    $config['Options']             = $xOptions;

    // Not all options may be specified and could be derived later
    $config['folder']          = $xOptions['folder'];
    $config['folderSanitized'] = $xOptions['folderSanitized'];
    $config['folderPath']      = $config['rootPath'] . $xOptions['folder'];    
}

// Some page submissions contain POSTed information too e.g.:  clsUload posts files[]
if (isset($_POST)) {
    // clsFileIO operation in progress
    if (isset($_POST['FileIO_Action'])) {
        $config['Options']['FileIO_Action'] = $_POST['FileIO_Action'];
    }
    if (isset($_POST['FileIO_Key'])) {
        $config['Options']['FileIO_Key']    = $_POST['FileIO_Key'];
    }
}

// Decode key here as clsFileIO does not have callback to access decryptData() method (yet)
// TODO:   Transform clsFileIO FileIO_Key into FileIO_Options array
if (isset($config['Options']['FileIO_Key'])) {
    if ($config['ENCRYPTION']) {
        $config['Options']['FileIO_Key_Encrypted'] = $config['Options']['FileIO_Key'];
        $config['Options']['FileIO_Key']           = $objENC->decryptData($config['Options']['FileIO_Key']); 
    }
    // Posted options will replace options from query_string
    array_merge($config['Options'], $objENC->strToNameValueArray($config['Options']['FileIO_Key'],"&","=") );
}

// --------------------------------------------
// --------------------------------------------
$objQW         = new QuickWiki($config);
$objQW->objENC = $objENC;

// --------------------------------------------
// HTML HEAD
// Methods below often require MAP define in: QW.js, QW.css, etc
// --------------------------------------------
$objQW->showHtmlHeader();


// --------------------------------------------
// --------------------------------------------
$objUser = new QWProfile($objQW->config);
$objQW->objUser = $objUser;

// --------------------------------------------
// Upload Form Operations
// Upload manages operations using JavaScript & Ajax using Upload.js which submits to Upload.php
// It does not submit or re-load any pages
// --------------------------------------------
if (isset($config['Options']['upload'])) {
    $objQW->displayUploadForm(null);
    exit;
}

// --------------------------------------------
// File Manager Operations
// --------------------------------------------
if (isset($config['Options']['FileIO_Action'])) {
    require_once('./clsFileIO.php');
    exit;
}

// --------------------------------------------
// Content Editor Operations
// --------------------------------------------
if ( (isset($_REQUEST["EditorSubmitForm"])) || (isset($config['Options']['Editor'])) ) {
    $objQW->displayPageOptions(null);
    echo "<p>";
    require_once('./Editor.php');
    exit;
}

// --------------------------------------------
// Display Qwiki
// --------------------------------------------
$objQW->listContents(null);

?>

